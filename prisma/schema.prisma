// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Module {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  name      String
  sections  Section[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Section {
  id         Int         @id @default(autoincrement())
  label      String
  name       String
  module     Module      @relation(fields: [moduleId], references: [id])
  moduleId   Int
  attributes Attribute[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([name, moduleId])
}

model Attribute {
  id        Int           @id @default(autoincrement())
  name      String
  label     String
  type      AttributeType
  data      Json?
  section   Section       @relation(fields: [sectionId], references: [id])
  sectionId Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([name, sectionId])
}

model Period {
  id               Int               @id @default(autoincrement())
  label            String            @unique
  workPrograms     WorkProgram[]
  organizationMeta OrganizationMeta?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Department {
  id                     Int                     @id @default(autoincrement())
  name                   String                  @unique
  leader                 String?
  workProgramDepartments WorkProgramDepartment[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

model Field {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  leader            String?
  workProgramFields WorkProgramField[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model WorkProgram {
  id                        Int                        @id @default(autoincrement())
  period                    Period?                    @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId                  Int?
  name                      String
  description               String?                    @db.Text()
  startDate                 DateTime?
  endDate                   DateTime?
  participationCount        Int?
  collaborators             String?                    @db.Text()
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  workProgramDepartments    WorkProgramDepartment[]
  workProgramFields         WorkProgramField[]
  workProgramDocumentations WorkProgramDocumentation[]
  workProgramStaffs         WorkProgramStaff[]
}

model WorkProgramDepartment {
  workProgram   WorkProgram @relation(fields: [workProgramId], references: [id], onDelete: Cascade)
  workProgramId Int
  department    Department  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId  Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([workProgramId, departmentId])
}

model WorkProgramStaff {
  id            Int         @id @default(autoincrement())
  workProgram   WorkProgram @relation(fields: [workProgramId], references: [id], onDelete: Cascade)
  workProgramId Int
  name          String
  isLead        Boolean     @default(false)
}

model WorkProgramField {
  work          WorkProgram @relation(fields: [workProgramId], references: [id], onDelete: Cascade)
  workProgramId Int
  field         Field       @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId       Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([workProgramId, fieldId])
}

model WorkProgramDocumentation {
  id            Int               @id @default(autoincrement())
  imgUrl        String
  fileType      DocumentationType @default(IMAGE)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  workProgram   WorkProgram       @relation(fields: [workProgramId], references: [id], onDelete: Cascade)
  workProgramId Int
}

model OrganizationMeta {
  id                       Int                       @id @default(autoincrement())
  title                    String?
  period                   Period                    @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId                 Int                       @unique
  vision                   String                    @db.Text()
  hierarchyImgUrl          String
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  organizationMetaMissions OrganizationMetaMission[]
}

model OrganizationMetaMission {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  organizationMeta   OrganizationMeta @relation(fields: [organizationMetaId], references: [id], onDelete: Cascade)
  organizationMetaId Int
  value              String
  number             Int
}

enum AttributeType {
  TITLE
  SUBTITLE
  TEXT
  SWIPER_CENTERED
  SWIPER_NORMAL
  IMAGE_BIG
  IMAGE_SMALL
  IMAGE_GRID
  IMAGE_GRID_2
  HERO
  HOME_EVENTS
  HOME_HIGHLIGHTS
  ORGANIZATION_STRUCTURE_1
  REPOSITORY_1
}

enum DocumentationType {
  IMAGE
  VIDEO
  YOUTUBE
}
